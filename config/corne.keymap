#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
## RGB Underglow

# Uncomment the following lines to enable the Corne RGB Underglow
# CONFIG_ZMK_RGB_UNDERGLOW=y
# CONFIG_WS2812_STRIP=y

# 0	Solid color    1 Breathe     2	Spectrum     3	Swirl
# CONFIG_ZMK_RGB_UNDERGLOW_EFF_START=2

# Turn off RGB underglow when keyboard goes into idle state
# CONFIG_ZMK_RGB_UNDERGLOW_AUTO_OFF_IDLE=y

# # Hue step in degrees (0-359) used by RGB actions default 10
# CONFIG_ZMK_RGB_UNDERGLOW_HUE_STEP=30

# # Brightness step in percent used by RGB actions default 10
# CONFIG_ZMK_RGB_UNDERGLOW_SAT_STEP=2
# CONFIG_ZMK_RGB_UNDERGLOW_BRT_STEP=10
# CONFIG_ZMK_RGB_UNDERGLOW_HUE_START=240
# CONFIG_ZMK_RGB_UNDERGLOW_HUE_STEP=5
# CONFIG_ZMK_RGB_UNDERGLOW_SAT_START=10
# CONFIG_ZMK_RGB_UNDERGLOW_SAT_STEP=2
# CONFIG_ZMK_RGB_UNDERGLOW_BRT_STEP=5
# CONFIG_ZMK_RGB_UNDERGLOW_BRT_START=15

# Uncomment the line below to disable external power toggling by the underglow.
# By default toggling the underglow on and off also toggles external power
# on and off. This also causes the display to turn off.
# CONFIG_ZMK_RGB_UNDERGLOW_EXT_POWER=n

&led_strip {
  chain-length = <0>;
  // chain-length = <27>;
  // 21 backlight + 6 glowlight
};

#define TAPPING_TERM 200

/ {
  behaviors {
    /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

    td_lock: tap_dance_lock {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LOCK";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TERM>;
      bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
    };
  };

  combos {
    compatible = "zmk,combos";

    Clear_BLE_Profile {
      bindings = <&bt BT_CLR>;
      key-positions = <0 38 5>;
    };

    Space {
      bindings = <&kp SPACE>;
      key-positions = <29 28>;
    };

    Enter {
      bindings = <&kp ENTER>;
      key-positions = <17 16>;
    };

    Capslock {
      bindings = <&kp CLCK>;
      key-positions = <5 6>;
    };
  };

  macros {
    git_status: git_status {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
      label = "GIT_STATUS";
    };
    git_commit_all: git_commit_all {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
      label = "GIT_COMMIT";
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "BASE";
      bindings = <
&mt LC(LS(LALT)) TAB  &kp Q  &kp W  &kp E         &kp R           &kp T       &kp Y      &kp U           &kp I      &kp O    &kp P      &kp MINUS
&kp LSHIFT            &kp A  &kp S  &kp D         &kp F           &kp G       &kp H      &kp J           &kp K      &kp L    &kp SEMI   &kp SINGLE_QUOTE
&kp LEFT_CONTROL      &kp Z  &kp X  &kp C         &kp V           &kp B       &kp N      &kp M           &kp COMMA  &kp DOT  &kp SLASH  &kp LEFT_ALT
                                    &kp LEFT_GUI  &mo 2  &kp BSPC    &kp SPACE  &mo 1  &kp ENTER
      >;
    };

    symbols_layer {
      label = "SYMBOLS";
      bindings = <
&trans   &kp N1    &kp N2  &kp N3    &kp N4    &kp N5     &kp N6    &kp N7  &kp N8    &kp N9    &kp N0  &trans
&kp ESC  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR          &kp RPAR           &trans
&trans         &kp GRAVE  &kp TILDE   &kp PIPE    &kp EQUAL  &kp PLUS        &kp LEFT_BRACKET  &kp RIGHT_BRACKET        &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp BACKSLASH &trans
                           &trans    &trans    &trans       &trans     &trans     &trans
      >;
    };

    nav_layer {
      label = "NAV";
      bindings = <
&kp LG(LC(TAB))          &trans  &kp LG(LEFT_BRACKET)  &kp LS(TAB)        &kp TAB          &kp LG(RIGHT_BRACKET)    &kp LA(LEFT)       &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &trans  &trans
&kp ESC           &trans  &trans                &kp K_SCROLL_DOWN  &kp K_SCROLL_UP  &trans                   &kp LEFT           &kp DOWN      &kp UP      &kp RIGHT      &trans  &trans
&trans  &trans  &kp HOME              &kp PG_DN          &kp PG_UP        &kp END                  &kp LG(LEFT)       &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans  &trans
                                               &trans             &trans           &trans                   &kp LC(LG(SPACE))  &trans        &trans
      >;
    };

    extended_layer {
      label = "EXT";
      bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6           &kp F7           &kp F8           &kp F9                &kp F10               &kp F12
&kp K_PP  &kp K_PREV        &kp K_NEXT     &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP     &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans &trans &trans           &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &trans        &trans          &trans           &trans           &trans  &trans    
                                    &trans        &trans        &trans          &trans           &trans           &trans
      >;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    Activate_EXT {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };
};
